// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, Anytown, USA",
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 863, DateTimeKind.Local).AddTicks(2641),
                            Email = "john.doe@example.com",
                            FullName = "John Doe",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 863, DateTimeKind.Local).AddTicks(2655),
                            Password = "ETlFRU2FmQtp+wXSQk1rQaRsQtA2IdyLvBd1NDScmxelN3Oy",
                            PhoneNumber = "123-456-7890",
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St, Anycity, USA",
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 866, DateTimeKind.Local).AddTicks(7365),
                            Email = "alice.smith@example.com",
                            FullName = "Alice Smith",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 866, DateTimeKind.Local).AddTicks(7370),
                            Password = "oaLJu/C5yZDfpyI3PijhkZ2VArZKYtEtyZ7LFgQq0JfypM+d",
                            PhoneNumber = "987-654-3210",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 869, DateTimeKind.Local).AddTicks(8559),
                            Email = "lam@senik.com",
                            FullName = "Staff Lam",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 869, DateTimeKind.Local).AddTicks(8560),
                            Password = "swk3kNlcBRvhu4Zy0zTqUX7BZafUO0Wa8CgxjsLrjYiHELAw",
                            Role = 0
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 873, DateTimeKind.Local).AddTicks(7277),
                            Email = "hoanganh@senik.com",
                            FullName = "Staff Hoàng Anh",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 873, DateTimeKind.Local).AddTicks(7306),
                            Password = "1jRgnRqtz9VVTf/QSjfK6G79ceG/vyKLjqdYqBewviQ7FknN",
                            Role = 0
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 878, DateTimeKind.Local).AddTicks(2351),
                            Email = "thong@senik.com",
                            FullName = "Staff Thông",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 878, DateTimeKind.Local).AddTicks(2354),
                            Password = "GSBoZzaHNgqKkLK/50ki6DgTLX5zcCMlCtMsn59RshazYJJb",
                            Role = 0
                        });
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<double>("TotalMoney")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<int>("TotalQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 1,
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8836),
                            Description = "A stunning succulent that glows like the moonlight.",
                            Image = "https://th.bing.com/th/id/OIP.xMeFmNxgcpdd5sXMfXIi-gHaE7?pid=ImgDet&w=800&h=533&rs=1",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8854),
                            Name = "Mystical Moonlight Succulent",
                            Price = 97000.0,
                            Quantity = 50,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            Category = 0,
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8856),
                            Description = "An illusionary cactus that appears to shimmer in the desert sun.",
                            Image = "https://th.bing.com/th/id/OIP.hNc2N9iLljV8VMWx_BHJ7QEDDw?pid=ImgDet&rs=1",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8856),
                            Name = "Desert Mirage Cactus",
                            Price = 12000.0,
                            Quantity = 30,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            Category = 3,
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8857),
                            Description = "Create a magical atmosphere with these enchanting fairy lights",
                            Image = "https://th.bing.com/th/id/OIP.2Kpj8zaosbOUIfX0AmSlMgHaHa?pid=ImgDet&rs=1",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8858),
                            Name = "Enchanted Forest Fairy Lights",
                            Price = 75000.0,
                            Quantity = 20,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            Category = 1,
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8859),
                            Description = "A succulent that resembles the fiery scales of a dragon.",
                            Image = "https://th.bing.com/th/id/OIP.YPEnYKS5Od0Hk2c5x6MH4QHaE8?pid=ImgDet&rs=1",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8860),
                            Name = "Fire Dragon Succulent",
                            Price = 86000.0,
                            Quantity = 45,
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            Category = 2,
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8861),
                            Description = "A beautifully crafted glass vase inspired by the ocean.",
                            Image = "https://i.pinimg.com/originals/ce/ef/a2/ceefa2a3524afedbe6d99fa19bacd437.jpg",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8862),
                            Name = "Ocean Breeze Glass Vase",
                            Price = 55000.0,
                            Quantity = 15,
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            Category = 3,
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8863),
                            Description = "A cactus that emits a neon-like glow in the dark.",
                            Image = "https://th.bing.com/th/id/R.b8d267e5efaf29425e5b7747cc6fd413?rik=Dj%2fXfb2WHH53wg&riu=http%3a%2f%2fstatic1.squarespace.com%2fstatic%2f51a79166e4b01ba7ba19a0f6%2ft%2f56f9e1101330bacc0f95b928%2f1459216677818%2f&ehk=IAXClID1p4n%2f%2bopYz6b6PwqITx0R9RveUHC1EjxJLFc%3d&risl=&pid=ImgRaw&r=0",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8863),
                            Name = "Neon Glow Cactus",
                            Price = 11000.0,
                            Quantity = 28,
                            Status = 0
                        },
                        new
                        {
                            Id = 7,
                            Category = 1,
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8865),
                            Description = "Create your own starry night with this succulent garden.",
                            Image = "https://i.pinimg.com/736x/37/2f/9f/372f9fa78e0cdf9b0141bce4dfc7dd23.jpg",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8865),
                            Name = "Starry Night Succulent Garden",
                            Price = 275000.0,
                            Quantity = 40,
                            Status = 0
                        },
                        new
                        {
                            Id = 8,
                            Category = 3,
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8867),
                            Description = "A crystal-clear globe that adds elegance to your decor.",
                            Image = "https://th.bing.com/th/id/OIP.sJ0mfVF7ptta-BZmzhAcjgAAAA?pid=ImgDet&rs=1",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8867),
                            Name = "Crystal Clear Decorative Globe",
                            Price = 55000.0,
                            Quantity = 22,
                            Status = 0
                        },
                        new
                        {
                            Id = 9,
                            Category = 2,
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8869),
                            Description = "An elegantly designed crystal vase fit for royalty.",
                            Image = "https://a.1stdibscdn.com/archivesE/upload/7977/26_15/2493352/2493352_l.jpeg",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8869),
                            Name = "Royal Elegance Crystal Vase",
                            Price = 65000.0,
                            Quantity = 18,
                            Status = 0
                        },
                        new
                        {
                            Id = 10,
                            Category = 0,
                            CreationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8871),
                            Description = "A rugged cactus reminiscent of the wild west landscapes.",
                            Image = "https://th.bing.com/th/id/OIP.ez7XcMIuvhJd8LERpka5CwHaE7?pid=ImgDet&rs=1",
                            IsDeleted = false,
                            ModificationDate = new DateTime(2023, 10, 16, 3, 26, 8, 882, DateTimeKind.Local).AddTicks(8871),
                            Name = "Wild West Prickly Pear Cactus",
                            Price = 75000.0,
                            Quantity = 35,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.HasOne("Domain.Account", "CustomerInfor")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CustomerInfor");
                });

            modelBuilder.Entity("Domain.OrderDetail", b =>
                {
                    b.HasOne("Domain.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Account", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
